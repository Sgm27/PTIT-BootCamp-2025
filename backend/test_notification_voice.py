"""
Test script for Notification Voice Service
T·ª± test ch·ª©c nƒÉng t·∫°o voice notification v√† l∆∞u file audio
"""
import asyncio
import wave
import base64
import os
from datetime import datetime
from typing import Optional

from services.notification_voice_service import NotificationVoiceService, NotificationTemplates


class NotificationVoiceTestClient:
    """Test client for notification voice service."""
    
    def __init__(self):
        self.voice_service = NotificationVoiceService()
        self.output_dir = "test_audio_outputs"
        
        # T·∫°o th∆∞ m·ª•c output n·∫øu ch∆∞a c√≥
        if not os.path.exists(self.output_dir):
            os.makedirs(self.output_dir)
            print(f"üìÅ Created output directory: {self.output_dir}")
    
    def save_audio_as_wav(self, audio_data: bytes, filename: str) -> str:
        """
        L∆∞u audio data th√†nh file WAV v·ªõi format 24kHz PCM.
        
        Args:
            audio_data: Raw audio bytes from Gemini
            filename: T√™n file (kh√¥ng bao g·ªìm extension)
            
        Returns:
            Path to saved WAV file
        """
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        wav_filename = f"{filename}_{timestamp}.wav"
        wav_path = os.path.join(self.output_dir, wav_filename)
        
        try:
            # T·∫°o file WAV v·ªõi th√¥ng s·ªë 24kHz, 16-bit, mono
            with wave.open(wav_path, 'wb') as wav_file:
                wav_file.setnchannels(1)  # Mono
                wav_file.setsampwidth(2)  # 16-bit
                wav_file.setframerate(24000)  # 24kHz
                wav_file.writeframes(audio_data)
            
            file_size = os.path.getsize(wav_path)
            print(f"üíæ Saved WAV file: {wav_path} ({file_size} bytes)")
            return wav_path
            
        except Exception as e:
            print(f"‚ùå Error saving WAV file: {e}")
            return None
    
    async def test_medicine_reminder(self):
        """Test medicine reminder notification."""
        print("\n" + "="*50)
        print("üß™ TESTING MEDICINE REMINDER")
        print("="*50)
        
        # T·∫°o th√¥ng b√°o nh·∫Øc u·ªëng thu·ªëc
        notification_text = NotificationTemplates.medicine_reminder(
            medicine_name="Paracetamol 500mg",
            time="8:00 s√°ng"
        )
        
        print(f"üìù Notification text: {notification_text}")
        
        # T·∫°o voice notification
        audio_data = await self.voice_service.generate_voice_notification(notification_text)
        
        if audio_data:
            # L∆∞u file WAV
            wav_path = self.save_audio_as_wav(audio_data, "medicine_reminder")
            
            # T·∫°o base64 cho server
            base64_audio = base64.b64encode(audio_data).decode('utf-8')
            
            # T·∫°o response nh∆∞ s·∫Ω g·ª≠i v·ªÅ server
            response = self.voice_service.create_notification_response(
                audio_base64=base64_audio,
                notification_text=notification_text
            )
            
            print(f"‚úÖ Test completed successfully!")
            print(f"üîó Base64 audio length: {len(base64_audio)} characters")
            print(f"üìä Response ready for backend")
            return True
        else:
            print("‚ùå Failed to generate voice notification")
            return False
    
    async def test_appointment_reminder(self):
        """Test appointment reminder notification."""
        print("\n" + "="*50)
        print("üß™ TESTING APPOINTMENT REMINDER")
        print("="*50)
        
        notification_text = NotificationTemplates.appointment_reminder(
            doctor_name="Nguy·ªÖn VƒÉn A",
            time="14:30",
            date="ng√†y mai"
        )
        
        print(f"üìù Notification text: {notification_text}")
        
        audio_data = await self.voice_service.generate_voice_notification(notification_text)
        
        if audio_data:
            wav_path = self.save_audio_as_wav(audio_data, "appointment_reminder")
            base64_audio = base64.b64encode(audio_data).decode('utf-8')
            
            response = self.voice_service.create_notification_response(
                audio_base64=base64_audio,
                notification_text=notification_text
            )
            
            print(f"‚úÖ Test completed successfully!")
            return True
        else:
            print("‚ùå Failed to generate voice notification")
            return False
    
    async def test_emergency_notification(self):
        """Test emergency notification."""
        print("\n" + "="*50)
        print("üß™ TESTING EMERGENCY NOTIFICATION")
        print("="*50)
        
        notification_text = "Ph√°t hi·ªán nh·ªãp tim b·∫•t th∆∞·ªùng. Vui l√≤ng li√™n h·ªá b√°c sƒ© ngay l·∫≠p t·ª©c."
        
        print(f"üìù Emergency text: {notification_text}")
        
        audio_data = await self.voice_service.generate_emergency_voice_notification(notification_text)
        
        if audio_data:
            wav_path = self.save_audio_as_wav(audio_data, "emergency_notification")
            base64_audio = base64.b64encode(audio_data).decode('utf-8')
            
            response = self.voice_service.create_notification_response(
                audio_base64=base64_audio,
                notification_text=f"TH√îNG B√ÅO KH·∫®N C·∫§P: {notification_text}"
            )
            
            print(f"‚úÖ Emergency test completed successfully!")
            return True
        else:
            print("‚ùå Failed to generate emergency voice notification")
            return False
    
    async def test_custom_notification(self, custom_text: str):
        """Test custom notification text."""
        print("\n" + "="*50)
        print("üß™ TESTING CUSTOM NOTIFICATION")
        print("="*50)
        
        print(f"üìù Custom text: {custom_text}")
        
        audio_data = await self.voice_service.generate_voice_notification(custom_text)
        
        if audio_data:
            wav_path = self.save_audio_as_wav(audio_data, "custom_notification")
            base64_audio = base64.b64encode(audio_data).decode('utf-8')
            
            response = self.voice_service.create_notification_response(
                audio_base64=base64_audio,
                notification_text=custom_text
            )
            
            print(f"‚úÖ Custom test completed successfully!")
            return True
        else:
            print("‚ùå Failed to generate custom voice notification")
            return False
    
    async def test_water_reminder(self):
        """Test water drinking reminder."""
        print("\n" + "="*50)
        print("üß™ TESTING WATER REMINDER")
        print("="*50)
        
        notification_text = NotificationTemplates.water_reminder()
        
        print(f"üìù Notification text: {notification_text}")
        
        audio_data = await self.voice_service.generate_voice_notification(notification_text)
        
        if audio_data:
            wav_path = self.save_audio_as_wav(audio_data, "water_reminder")
            base64_audio = base64.b64encode(audio_data).decode('utf-8')
            
            response = self.voice_service.create_notification_response(
                audio_base64=base64_audio,
                notification_text=notification_text
            )
            
            print(f"‚úÖ Water reminder test completed successfully!")
            return True
        else:
            print("‚ùå Failed to generate water reminder notification")
            return False
    
    async def run_all_tests(self):
        """Ch·∫°y t·∫•t c·∫£ c√°c test cases."""
        print("üöÄ STARTING NOTIFICATION VOICE SERVICE TESTS")
        print("=" * 60)
        
        test_results = []
        
        # Test c√°c lo·∫°i notification kh√°c nhau
        tests = [
            ("Medicine Reminder", self.test_medicine_reminder()),
            ("Appointment Reminder", self.test_appointment_reminder()),
            ("Water Reminder", self.test_water_reminder()),
            ("Emergency Notification", self.test_emergency_notification()),
        ]
        
        for test_name, test_coro in tests:
            try:
                result = await test_coro
                test_results.append((test_name, result))
            except Exception as e:
                print(f"‚ùå Error in {test_name}: {e}")
                test_results.append((test_name, False))
        
        # Test custom notification
        try:
            custom_result = await self.test_custom_notification(
                "Ch√†o b√°c, ƒë√¢y l√† th√¥ng b√°o th·ª≠ nghi·ªám t·ª´ h·ªá th·ªëng chƒÉm s√≥c s·ª©c kh·ªèe. H·ªá th·ªëng ƒëang ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng."
            )
            test_results.append(("Custom Notification", custom_result))
        except Exception as e:
            print(f"‚ùå Error in Custom Notification: {e}")
            test_results.append(("Custom Notification", False))
        
        # T·ªïng k·∫øt k·∫øt qu·∫£
        print("\n" + "="*60)
        print("üìä TEST RESULTS SUMMARY")
        print("="*60)
        
        passed = 0
        total = len(test_results)
        
        for test_name, result in test_results:
            status = "‚úÖ PASSED" if result else "‚ùå FAILED"
            print(f"{test_name:<25} {status}")
            if result:
                passed += 1
        
        print("\n" + "="*60)
        print(f"üìà TOTAL: {passed}/{total} tests passed")
        
        if passed == total:
            print("üéâ ALL TESTS PASSED! Voice notification service is working correctly!")
        else:
            print("‚ö†Ô∏è  Some tests failed. Please check the error messages above.")
        
        print(f"üìÅ Audio files saved in: {os.path.abspath(self.output_dir)}")
        
        return passed == total


async def main():
    """Main function ƒë·ªÉ ch·∫°y tests."""
    try:
        # Kh·ªüi t·∫°o test client
        test_client = NotificationVoiceTestClient()
        
        print("üéôÔ∏è  NOTIFICATION VOICE SERVICE TEST SUITE")
        print("Testing voice generation and WAV file saving functionality")
        print("Audio format: WAV, 24kHz, 16-bit PCM, Mono")
        print()
        
        # Ch·∫°y t·∫•t c·∫£ tests
        success = await test_client.run_all_tests()
        
        if success:
            print("\nüéØ All tests completed successfully!")
            print("You can now use the voice notification service in your backend.")
        else:
            print("\nüö® Some tests failed. Please check the configuration and try again.")
            
    except Exception as e:
        print(f"üí• Critical error during testing: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    # Ch·∫°y tests
    print("üîß Initializing Notification Voice Service Tests...")
    asyncio.run(main())

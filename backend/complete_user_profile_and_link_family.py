#!/usr/bin/env python3
"""
Script ƒë·ªÉ ho√†n t·∫•t th√¥ng tin cho user son12345@gmail.com 
v√† li√™n k·∫øt h·ªç v·ªõi user son123@gmail.com nh∆∞ m·ªôt th√†nh vi√™n gia ƒë√¨nh
"""

import sys
import os
from datetime import date
from typing import Optional
from sqlalchemy import and_

# Th√™m backend v√†o path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from db.db_services.user_service import UserService
from db.models import UserType, RelationshipType
from db.db_config import get_db
from db.models import User, ElderlyProfile, FamilyProfile, FamilyRelationship

def main():
    """Main function ƒë·ªÉ ho√†n t·∫•t user profile v√† t·∫°o family relationship"""
    
    print("üîß B·∫Øt ƒë·∫ßu ho√†n t·∫•t th√¥ng tin user v√† t·∫°o family relationship...")
    
    # Kh·ªüi t·∫°o user service
    user_service = UserService()
    
    try:
        # 1. Ki·ªÉm tra user son123@gmail.com (elderly user)
        print("\nüìã B∆∞·ªõc 1: Ki·ªÉm tra user son123@gmail.com...")
        elderly_user = user_service.get_user_by_contact(email="son123@gmail.com")
        
        if not elderly_user:
            print("‚ùå Kh√¥ng t√¨m th·∫•y user son123@gmail.com")
            return False
        
        print(f"‚úÖ T√¨m th·∫•y elderly user: {elderly_user['full_name']} (ID: {elderly_user['id']})")
        
        # 2. Ki·ªÉm tra user son12345@gmail.com
        print("\nüìã B∆∞·ªõc 2: Ki·ªÉm tra user son12345@gmail.com...")
        family_user = user_service.get_user_by_contact(email="son12345@gmail.com")
        
        if not family_user:
            print("‚ùå Kh√¥ng t√¨m th·∫•y user son12345@gmail.com, c·∫ßn t·∫°o m·ªõi...")
            family_user = create_family_user()
            if not family_user:
                print("‚ùå Kh√¥ng th·ªÉ t·∫°o user son12345@gmail.com")
                return False
        else:
            print(f"‚úÖ T√¨m th·∫•y family user: {family_user['full_name']} (ID: {family_user['id']})")
            print(f"   Th√¥ng tin hi·ªán t·∫°i:")
            print(f"   - Phone: {family_user.get('phone', 'N/A')}")
            print(f"   - Address: {family_user.get('address', 'N/A')}")
            print(f"   - City: {family_user.get('city', 'N/A')}")
        
        # 3. Ho√†n t·∫•t th√¥ng tin cho family user n·∫øu c·∫ßn
        print("\nüìã B∆∞·ªõc 3: Ho√†n t·∫•t th√¥ng tin cho family user...")
        if not is_profile_complete(family_user):
            print("üîÑ C·∫≠p nh·∫≠t th√¥ng tin profile...")
            success = update_family_profile(family_user['id'])
            if not success:
                print("‚ùå Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t profile")
                return False
            print("‚úÖ ƒê√£ c·∫≠p nh·∫≠t profile th√†nh c√¥ng")
        else:
            print("‚úÖ Profile ƒë√£ ƒë·∫ßy ƒë·ªß th√¥ng tin")
        
        # 4. T·∫°o family relationship tr·ª±c ti·∫øp trong database
        print("\nüìã B∆∞·ªõc 4: T·∫°o family relationship...")
        success = create_family_relationship_direct(
            elderly_user_id=elderly_user['id'],
            family_member_id=family_user['id']
        )
        
        if success:
            print("‚úÖ ƒê√£ t·∫°o family relationship th√†nh c√¥ng!")
            print(f"   Elderly User: {elderly_user['full_name']} ({elderly_user['email']})")
            print(f"   Family Member: {family_user['full_name']} ({family_user['email']})")
            print(f"   Relationship: CHILD")
        else:
            print("‚ùå Kh√¥ng th·ªÉ t·∫°o family relationship")
            return False
        
        # 5. X√°c nh·∫≠n relationship ƒë√£ ƒë∆∞·ª£c t·∫°o
        print("\nüìã B∆∞·ªõc 5: X√°c nh·∫≠n family relationship...")
        family_members = user_service.get_family_members(elderly_user['id'])
        if family_members:
            print(f"‚úÖ X√°c nh·∫≠n: Elderly user c√≥ {len(family_members)} family member(s)")
            for member in family_members:
                print(f"   - {member['full_name']} ({member['email']}) - {member['relationship_type']}")
        else:
            print("‚ö†Ô∏è  Kh√¥ng t√¨m th·∫•y family members, c√≥ th·ªÉ c√≥ v·∫•n ƒë·ªÅ v·ªõi relationship")
        
        print("\nüéâ Ho√†n t·∫•t! User son12345@gmail.com ƒë√£ ƒë∆∞·ª£c li√™n k·∫øt v·ªõi son123@gmail.com")
        return True
        
    except Exception as e:
        print(f"‚ùå L·ªói: {e}")
        return False

def create_family_user() -> Optional[dict]:
    """T·∫°o m·ªõi family user v·ªõi email son12345@gmail.com"""
    try:
        print("üîÑ T·∫°o m·ªõi family user...")
        
        # T·∫°o user v·ªõi th√¥ng tin c∆° b·∫£n
        user_service = UserService()
        new_user = user_service.create_user(
            user_type=UserType.FAMILY_MEMBER,
            full_name="Nguy·ªÖn VƒÉn S∆°n",
            email="son12345@gmail.com",
            phone="0987654322",  # S·ª≠ d·ª•ng s·ªë ƒëi·ªán tho·∫°i kh√°c
            date_of_birth=date(1990, 5, 15),
            gender="Nam",
            address="123 ƒê∆∞·ªùng ABC, Qu·∫≠n 1, TP.HCM",
            city="TP.HCM",
            country="Vietnam"
        )
        
        if new_user:
            print(f"‚úÖ ƒê√£ t·∫°o family user: {new_user.full_name}")
            return {
                'id': str(new_user.id),
                'full_name': new_user.full_name,
                'email': new_user.email,
                'phone': new_user.phone,
                'date_of_birth': new_user.date_of_birth,
                'gender': new_user.gender,
                'address': new_user.address,
                'city': new_user.city,
                'country': new_user.country
            }
        else:
            print("‚ùå Kh√¥ng th·ªÉ t·∫°o user")
            return None
            
    except Exception as e:
        print(f"‚ùå L·ªói khi t·∫°o user: {e}")
        return None

def is_profile_complete(user: dict) -> bool:
    """Ki·ªÉm tra xem profile c√≥ ƒë·∫ßy ƒë·ªß th√¥ng tin kh√¥ng"""
    required_fields = ['full_name', 'phone', 'date_of_birth', 'gender', 'address', 'city']
    
    for field in required_fields:
        if not user.get(field):
            return False
    
    return True

def update_family_profile(user_id: str) -> bool:
    """C·∫≠p nh·∫≠t th√¥ng tin profile cho family user"""
    try:
        with get_db() as db:
            # C·∫≠p nh·∫≠t user
            user = db.query(User).filter(User.id == user_id).first()
            if not user:
                return False
            
            # Ki·ªÉm tra xem s·ªë ƒëi·ªán tho·∫°i m·ªõi c√≥ b·ªã tr√πng kh√¥ng
            existing_phone = db.query(User).filter(
                and_(User.phone == "0987654322", User.id != user_id)
            ).first()
            
            if existing_phone:
                print("‚ö†Ô∏è  S·ªë ƒëi·ªán tho·∫°i 0987654322 ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng, s·ª≠ d·ª•ng s·ªë kh√°c...")
                phone_number = "0987654323"
            else:
                phone_number = "0987654322"
            
            # C·∫≠p nh·∫≠t th√¥ng tin c∆° b·∫£n
            user.full_name = "Nguy·ªÖn VƒÉn S∆°n"
            user.phone = phone_number
            user.date_of_birth = date(1990, 5, 15)
            user.gender = "Nam"
            user.address = "123 ƒê∆∞·ªùng ABC, Qu·∫≠n 1, TP.HCM"
            user.city = "TP.HCM"
            user.country = "Vietnam"
            user.preferred_language = "vi"
            user.timezone = "Asia/Ho_Chi_Minh"
            
            # C·∫≠p nh·∫≠t family profile
            family_profile = db.query(FamilyProfile).filter(FamilyProfile.user_id == user_id).first()
            if family_profile:
                family_profile.occupation = "K·ªπ s∆∞ ph·∫ßn m·ªÅm"
                family_profile.workplace = "C√¥ng ty ABC"
                family_profile.is_primary_caregiver = True
                family_profile.care_responsibilities = ["Qu·∫£n l√Ω thu·ªëc", "ƒê·∫∑t l·ªãch kh√°m", "Theo d√µi s·ª©c kh·ªèe"]
                family_profile.availability_schedule = {
                    "weekdays": "8:00-18:00",
                    "weekends": "9:00-17:00",
                    "emergency": "24/7"
                }
            
            db.commit()
            print(f"‚úÖ ƒê√£ c·∫≠p nh·∫≠t family profile v·ªõi s·ªë ƒëi·ªán tho·∫°i: {phone_number}")
            return True
            
    except Exception as e:
        print(f"‚ùå L·ªói khi c·∫≠p nh·∫≠t profile: {e}")
        return False

def create_family_relationship_direct(elderly_user_id: str, family_member_id: str) -> bool:
    """T·∫°o family relationship tr·ª±c ti·∫øp trong database b·∫±ng SQL"""
    try:
        with get_db() as db:
            # L·∫•y profile IDs
            elderly_profile = db.query(ElderlyProfile).filter(
                ElderlyProfile.user_id == elderly_user_id
            ).first()
            
            family_profile = db.query(FamilyProfile).filter(
                FamilyProfile.user_id == family_member_id
            ).first()
            
            if not elderly_profile or not family_profile:
                print("‚ùå Kh√¥ng t√¨m th·∫•y profiles")
                return False
            
            # Ki·ªÉm tra xem relationship ƒë√£ t·ªìn t·∫°i ch∆∞a
            existing = db.query(FamilyRelationship).filter(
                and_(
                    FamilyRelationship.elderly_id == elderly_profile.id,
                    FamilyRelationship.family_member_id == family_profile.id
                )
            ).first()
            
            if existing:
                print("‚úÖ Family relationship ƒë√£ t·ªìn t·∫°i")
                return True
            
            # T·∫°o relationship m·ªõi b·∫±ng SQL tr·ª±c ti·∫øp
            from sqlalchemy import text
            sql = text("""
                INSERT INTO family_relationships (
                    id, elderly_id, family_member_id, relationship_type,
                    can_view_health_data, can_receive_notifications,
                    can_manage_medications, can_schedule_appointments,
                    created_at, is_active
                ) VALUES (
                    gen_random_uuid(), :elderly_id, :family_member_id, 'CHILD',
                    :can_view_health_data, :can_receive_notifications,
                    :can_manage_medications, :can_schedule_appointments,
                    now(), :is_active
                )
            """)
            
            result = db.execute(sql, {
                'elderly_id': elderly_profile.id,
                'family_member_id': family_profile.id,
                'can_view_health_data': True,
                'can_receive_notifications': True,
                'can_manage_medications': True,
                'can_schedule_appointments': True,
                'is_active': True
            })
            
            db.commit()
            print("‚úÖ ƒê√£ t·∫°o family relationship th√†nh c√¥ng b·∫±ng SQL")
            return True
            
    except Exception as e:
        print(f"‚ùå L·ªói khi t·∫°o family relationship: {e}")
        return False

if __name__ == "__main__":
    success = main()
    if success:
        print("\nüéØ Script ƒë√£ ch·∫°y th√†nh c√¥ng!")
        sys.exit(0)
    else:
        print("\nüí• Script g·∫∑p l·ªói!")
        sys.exit(1) 